import google, re, urllib2
from bs4 import BeautifulSoup

def get_pages(query):
	"""
	Input: A string representing a search query. (the question)
	Returns: A list of urls generated by the search query
	"""
	pages = google.search(query,num=20,start=0,stop=20)
	page_list = []
	for page in pages:
		page_list.append(page)
	return page_list

def get_soup(page):
	"""
	Input: A link to a webpage
	Output: Actual text from the webpage
	"""
	try:	
		url = urllib2.urlopen(page)
	except:
		#print "erpnope"
		return ""
	html = url.read()
	soup = BeautifulSoup(html, 'html.parser')
	raw = soup.get_text()
	text = re.sub("[\t\n ]+",' ',raw)
	return text

def get_names(text):
	"""
	Input: Text to find names from
	Output: Dic of names and their frequencies
	"""
	dic = {}
	pattern = "[A-Z][a-z]+ [A-Z][a-z]+"
	result = re.findall(pattern,text)
	for name in result:
		if name not in dic.keys():
			dic[name] = 1;
		else:
			dic[name] += 1;
	return dic

def validate(name):
	"""
	Input: A String of a "name"
	Output: Whether or not it's true that the words in the name are not common
	
	>>> validate("Yes No")
	False

	>>> validate("Tobey Maguire")
	True
	"""
	w_list = open("common_words.txt").readlines()
	w_split = name.split(' ')
	#print w_list
	if w_split[0].lower()+"\n" in w_list or w_split[1].lower()+"\n" in w_list:
		return False
	if w_split[0].lower()=="permalink":
		return False
	return True

def find_names(dic):
	"""
	Input: Dictionary to find name from
	Output: List of top 10 names and their frequency in order hi->low
	"""
	name_list = []
	for name in dic.keys():
		if validate(name):
			name_list.append([name,dic[name]])
	name_list=sorted(name_list, key=lambda names:names[1])
	name_list.reverse()
	name_list = name_list[:10]
	return name_list

def answer(query):
	"""
	Input: String query
	Output: list of list of possible answers and frequencies
	"""
	totalText = ""
	page_list = get_pages(query)
	for page in page_list:
		totalText += get_soup(page)
	dic = get_names(totalText)
	return find_names(dic)

#print answer("Who lives in a pineapple under the sea?")
if __name__ == "__main__":
	import doctest
	doctest.testmod()